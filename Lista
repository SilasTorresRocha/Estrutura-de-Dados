//
// Created by Silas on 13/07/2021.
//

#ifndef FILA1_LISTAD_H
#define FILA1_LISTAD_H

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>

typedef struct  {
    int chave;
} Item;

typedef struct NoLista *Ponteiro;

typedef struct NoLista {
    Item elemento;
    Ponteiro proximo;
    Ponteiro anterior;
} NoLista;

typedef struct {
    Ponteiro primeiro;
    int tamanho;
} ListaDupla;

void iniciaLista(ListaDupla *list){
    list->primeiro=NULL;
    list->tamanho=0;
}
void imprimeLista(ListaDupla *list){
    Ponteiro aux;
    aux=list->primeiro;
    printf("{ ");
    while (aux!=NULL){
        printf("%i, ",aux->elemento.chave);
        aux=aux->proximo;
    }
    printf(" }");
}
void imprimeListaReversa(ListaDupla *list);
void destroiLista(ListaDupla *list);
bool estaVazia(ListaDupla *list){
    return (list->primeiro==NULL);
}
bool insere(ListaDupla *list, Item x){
    Ponteiro novo=(Ponteiro) malloc(sizeof (Ponteiro));
    if(!novo){
        printf("[ E ]: Erro ao alocar\n");
        return EXIT_FAILURE;
    }
    novo->elemento.chave=x.chave;

    if(estaVazia(list)|| x.chave< list->primeiro->elemento.chave){
        novo->proximo=list->primeiro;
        list->primeiro=novo;
    } else{
        Ponteiro auxtemp=(Ponteiro) malloc(sizeof (Ponteiro));
        if(!auxtemp){
            printf("[ E ]: Erro ao alocar\n");
            return EXIT_FAILURE;
        }
        auxtemp=list->primeiro;
        while (!auxtemp->proximo && x.chave > auxtemp->proximo->elemento.chave){
           novo->proximo = auxtemp->proximo;
           auxtemp->proximo=novo;
        }

    }
    list->tamanho++;
}

bool pesquisa(ListaDupla *list, int key);
bool removeElemento(ListaDupla *list, int key, Item *item);
bool removePrimeiro(ListaDupla *list, Item *item);
bool removeUltimo(ListaDupla *list, Item *item);
int tamanhoLista(ListaDupla *list){
    return (list->tamanho);
}
Item primeiro(ListaDupla *list);
Item ultimo(ListaDupla *list);

#endif //FILA1_LISTAD_H
